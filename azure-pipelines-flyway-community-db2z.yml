# Flyway pipeline db2Z community edition
# Build flyway jars and test with commandline.
# Do not upload to nexus. That will be done in separate pipeline on its own branch, forked from this one, but with adjusted GroupId en dependencies in the pom files of parent and children

trigger: none
# - feature/db2z

jobs:
- deployment:
  displayName: 'Building the flyway runtime'
  environment: 'flyway-develop'
  pool:
    name: ruttm03
  strategy:
    runOnce:
      deploy:   
        steps:
        # Below we use fixed paths on agent. Have to do this dynamically using custom task etc. For now, o.k.
        - checkout: self
          clean: true
        
        # - task: Maven@3
        #   displayName: 'Maven clean package'
        #   inputs:
        #     mavenPomFile: 'pom.xml'
        #     mavenOptions: '-Xmx3072m'
        #     options: '-P nexus-deploy -pl !flyway-gradle-plugin -s $(Build.Repository.LocalPath)/settings.xml'
        #     publishJUnitResults: true
        #     testResultsFiles: '**/surefire-reports/TEST-*.xml'
        #     goals: 'clean package'
        #     jdkVersionOption: '11'
        #     jdkArchitectureOption: 'openjdk'
        #     mavenVersionOption: 'Default'
        #     mavenAuthenticateFeed: false
        #     effectivePomSkip: false

        # - task: Bash@3
        #   displayName: 'Remove previous Flyway commandline jars from runtime'
        #   inputs:
        #     targetType: inline
        #     script: 'rm -f $FLYWAY_RUNTIME_LIB/*jar'

        # - task: Bash@3
        #   displayName: 'Copy commandline Flyway jars from target to runtime'
        #   inputs:
        #     targetType: inline
        #     script: 'cp $(Build.Repository.LocalPath)/*/target/*.jar $FLYWAY_RUNTIME_LIB'
        # - task: Bash@3
        #   displayName: 'Do a Flyway commandline test with the new jars: # 1: The cleanup'
        #   inputs:
        #     targetType: inline
        #     script: 'flyway clean -password=$(flyway.password) -user=\$(flyway.user) -configFiles=$(Build.Repository.LocalPath)/flyway-sdp.conf || exit 1'
        # - task: Bash@3
        #   displayName: 'Do a Flyway commandline test with the new jars: # 2: The migration'
        #   inputs:
        #     targetType: inline
        #     script: 'flyway migrate -password=$(flyway.password) -user=\$(flyway.user) -locations="filesystem:$(Build.Repository.LocalPath)/test_data" -configFiles=$(Build.Repository.LocalPath)/flyway-sdp.conf || exit 1'
        # - task: Bash@3
        #   displayName: 'And finally clean up the mess you made using the commandline'
        #   inputs:
        #     targetType: inline
        #     script: 'flyway clean -password=$(flyway.password) -user=\$(flyway.user) -configFiles=$(Build.Repository.LocalPath)/flyway-sdp.conf || exit 1'

        - task: SonarQubePrepare@4
          displayName: 'configure SonarQube'
          inputs:
            SonarQube: 'Belastingdienst SonarQube Knutsel Host'
            scannerMode: 'Other'
        - task: Maven@3
          displayName: 'Run SonarQube analysis'
          inputs:
            mavenPomFile: 'pom.xml'
            goals: 'sonar:sonar'
            options: >
              --no-transfer-progress
              -s $(Build.Repository.LocalPath)/settings.xml
              -DskipTests -Psonarqube
            publishJUnitResults: false
            javaHomeOption: 'JDKVersion'
            jdkVersionOption: '11'
            jdkArchitectureOption: 'openjdk'
            mavenVersionOption: 'Default'
            mavenAuthenticateFeed: false
            effectivePomSkip: false
        # - task: Maven@3
        #   displayName: 'Run SonarQube analysis'
        #   inputs:
        #     mavenPomFile: 'pom.xml'
        #     goals: 'sonar:sonar'
        #     options: '-s $(settingsFile.secureFilePath) -DskipTests -Psonarqube'
        #     publishJUnitResults: false
        #     jdkVersionOption: '11'
        #     jdkArchitectureOption: 'openjdk'
        #     mavenVersionOption: 'Default'
        #     mavenAuthenticateFeed: false
        #     effectivePomSkip: false
        # - task: SonarQubePublish@4
        #   displayName: 'Publish SonarQube QualityGate result'
        #   inputs:
        #     pollingTimeoutSec: '300'
